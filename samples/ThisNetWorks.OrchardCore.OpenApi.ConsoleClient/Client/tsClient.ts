/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    get(contentItemId: string | null): Promise<ContentItemDto> {
        let url_ = this.baseUrl + "/api/content/{contentItemId}";
        if (contentItemId === undefined || contentItemId === null)
            throw new Error("The parameter 'contentItemId' must be defined.");
        url_ = url_.replace("{contentItemId}", encodeURIComponent("" + contentItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ContentItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentItemDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ContentItemDto>(<any>null);
    }

    delete(contentItemId: string | null): Promise<ContentItemDto> {
        let url_ = this.baseUrl + "/api/content/{contentItemId}";
        if (contentItemId === undefined || contentItemId === null)
            throw new Error("The parameter 'contentItemId' must be defined.");
        url_ = url_.replace("{contentItemId}", encodeURIComponent("" + contentItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ContentItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentItemDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ContentItemDto>(<any>null);
    }

    post(draft: boolean | undefined, model: ContentItemDto): Promise<ContentItemDto> {
        let url_ = this.baseUrl + "/api/content?";
        if (draft === null)
            throw new Error("The parameter 'draft' cannot be null.");
        else if (draft !== undefined)
            url_ += "draft=" + encodeURIComponent("" + draft) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ContentItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentItemDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ContentItemDto>(<any>null);
    }

    create(model: CreateApiViewModel): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/tenants/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    setup(model: SetupApiViewModel): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/tenants/setup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetup(_response);
        });
    }

    protected processSetup(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class ContentClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    post(indexName: string | null | undefined, query: string | null | undefined, parameters: string | null | undefined): Promise<LuceneItemsDto | null> {
        let url_ = this.baseUrl + "/api/lucene/content?";
        if (indexName !== undefined && indexName !== null)
            url_ += "indexName=" + encodeURIComponent("" + indexName) + "&";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<LuceneItemsDto | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LuceneItemsDto.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LuceneItemsDto | null>(<any>null);
    }

    get(indexName: string | null | undefined, query: string | null | undefined, parameters: string | null | undefined): Promise<LuceneItemsDto | null> {
        let url_ = this.baseUrl + "/api/lucene/content?";
        if (indexName !== undefined && indexName !== null)
            url_ += "indexName=" + encodeURIComponent("" + indexName) + "&";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<LuceneItemsDto | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LuceneItemsDto.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LuceneItemsDto | null>(<any>null);
    }
}

export class DocumentsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    post(indexName: string | null | undefined, query: string | null | undefined, parameters: string | null | undefined): Promise<LuceneDocumentDto[] | null> {
        let url_ = this.baseUrl + "/api/lucene/documents?";
        if (indexName !== undefined && indexName !== null)
            url_ += "indexName=" + encodeURIComponent("" + indexName) + "&";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<LuceneDocumentDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LuceneDocumentDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LuceneDocumentDto[] | null>(<any>null);
    }

    get(indexName: string | null | undefined, query: string | null | undefined, parameters: string | null | undefined): Promise<LuceneDocumentDto[] | null> {
        let url_ = this.baseUrl + "/api/lucene/documents?";
        if (indexName !== undefined && indexName !== null)
            url_ += "indexName=" + encodeURIComponent("" + indexName) + "&";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (parameters !== undefined && parameters !== null)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<LuceneDocumentDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LuceneDocumentDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LuceneDocumentDto[] | null>(<any>null);
    }
}

export class QueryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    post(name: string | null, parameters: string | null | undefined): Promise<ContentItemDto[] | null> {
        let url_ = this.baseUrl + "/api/queries/{name}?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        if (parameters !== undefined && parameters !== null)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<ContentItemDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ContentItemDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ContentItemDto[] | null>(<any>null);
    }

    get(name: string | null, parameters: string | null | undefined): Promise<ContentItemDto[] | null> {
        let url_ = this.baseUrl + "/api/queries/{name}?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        if (parameters !== undefined && parameters !== null)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ContentItemDto[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ContentItemDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ContentItemDto[] | null>(<any>null);
    }
}

export class FooClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Promise<GetFooDto[]> {
        let url_ = this.baseUrl + "/api/foo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<GetFooDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetFooDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetFooDto[]>(<any>null);
    }

    post(createDto: CreateFooDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/foo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    get(fooId: string | null): Promise<GetFooDto> {
        let url_ = this.baseUrl + "/api/foo/{fooId}";
        if (fooId === undefined || fooId === null)
            throw new Error("The parameter 'fooId' must be defined.");
        url_ = url_.replace("{fooId}", encodeURIComponent("" + fooId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GetFooDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFooDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetFooDto>(<any>null);
    }

    put(reference: string | null, updateDto: UpdateFooDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/foo/{reference}";
        if (reference === undefined || reference === null)
            throw new Error("The parameter 'reference' must be defined.");
        url_ = url_.replace("{reference}", encodeURIComponent("" + reference));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class LuceneDocumentDto implements ILuceneDocumentDto {

    constructor(data?: ILuceneDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): LuceneDocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new LuceneDocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ILuceneDocumentDto {
}

export class CreateApiViewModel implements ICreateApiViewModel {
    description?: string | undefined;
    name!: string;
    databaseProvider?: string | undefined;
    requestUrlPrefix?: string | undefined;
    requestUrlHost?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    recipeName?: string | undefined;

    constructor(data?: ICreateApiViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
            this.name = _data["Name"];
            this.databaseProvider = _data["DatabaseProvider"];
            this.requestUrlPrefix = _data["RequestUrlPrefix"];
            this.requestUrlHost = _data["RequestUrlHost"];
            this.connectionString = _data["ConnectionString"];
            this.tablePrefix = _data["TablePrefix"];
            this.recipeName = _data["RecipeName"];
        }
    }

    static fromJS(data: any): CreateApiViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        data["Name"] = this.name;
        data["DatabaseProvider"] = this.databaseProvider;
        data["RequestUrlPrefix"] = this.requestUrlPrefix;
        data["RequestUrlHost"] = this.requestUrlHost;
        data["ConnectionString"] = this.connectionString;
        data["TablePrefix"] = this.tablePrefix;
        data["RecipeName"] = this.recipeName;
        return data; 
    }
}

export interface ICreateApiViewModel {
    description?: string | undefined;
    name: string;
    databaseProvider?: string | undefined;
    requestUrlPrefix?: string | undefined;
    requestUrlHost?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    recipeName?: string | undefined;
}

export class SetupApiViewModel implements ISetupApiViewModel {
    name!: string;
    siteName!: string;
    databaseProvider?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    userName!: string;
    email!: string;
    password?: string | undefined;
    recipeName?: string | undefined;
    recipe?: string | undefined;
    siteTimeZone?: string | undefined;

    constructor(data?: ISetupApiViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.siteName = _data["SiteName"];
            this.databaseProvider = _data["DatabaseProvider"];
            this.connectionString = _data["ConnectionString"];
            this.tablePrefix = _data["TablePrefix"];
            this.userName = _data["UserName"];
            this.email = _data["Email"];
            this.password = _data["Password"];
            this.recipeName = _data["RecipeName"];
            this.recipe = _data["Recipe"];
            this.siteTimeZone = _data["SiteTimeZone"];
        }
    }

    static fromJS(data: any): SetupApiViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SetupApiViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["SiteName"] = this.siteName;
        data["DatabaseProvider"] = this.databaseProvider;
        data["ConnectionString"] = this.connectionString;
        data["TablePrefix"] = this.tablePrefix;
        data["UserName"] = this.userName;
        data["Email"] = this.email;
        data["Password"] = this.password;
        data["RecipeName"] = this.recipeName;
        data["Recipe"] = this.recipe;
        data["SiteTimeZone"] = this.siteTimeZone;
        return data; 
    }
}

export interface ISetupApiViewModel {
    name: string;
    siteName: string;
    databaseProvider?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    userName: string;
    email: string;
    password?: string | undefined;
    recipeName?: string | undefined;
    recipe?: string | undefined;
    siteTimeZone?: string | undefined;
}

export class GetFooDto implements IGetFooDto {
    fooId?: string | undefined;
    text?: string | undefined;

    constructor(data?: IGetFooDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fooId = _data["FooId"];
            this.text = _data["Text"];
        }
    }

    static fromJS(data: any): GetFooDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFooDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FooId"] = this.fooId;
        data["Text"] = this.text;
        return data; 
    }
}

export interface IGetFooDto {
    fooId?: string | undefined;
    text?: string | undefined;
}

export class CreateFooDto extends GetFooDto implements ICreateFooDto {

    constructor(data?: ICreateFooDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CreateFooDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFooDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateFooDto extends IGetFooDto {
}

export class UpdateFooDto extends GetFooDto implements IUpdateFooDto {

    constructor(data?: IUpdateFooDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UpdateFooDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFooDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateFooDto extends IGetFooDto {
}

export abstract class ContentElementDto implements IContentElementDto {

    constructor(data?: IContentElementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ContentElementDto {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ContentElementDto' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IContentElementDto {
}

export class ContentFieldDto extends ContentElementDto implements IContentFieldDto {

    constructor(data?: IContentFieldDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ContentFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IContentFieldDto extends IContentElementDto {
}

export class TextFieldDto extends ContentFieldDto implements ITextFieldDto {
    text?: string | undefined;

    constructor(data?: ITextFieldDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.text = _data["Text"];
        }
    }

    static fromJS(data: any): TextFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new TextFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Text"] = this.text;
        super.toJSON(data);
        return data; 
    }
}

export interface ITextFieldDto extends IContentFieldDto {
    text?: string | undefined;
}

export class LuceneItemsDto implements ILuceneItemsDto {
    items?: (ContentItemDto | undefined)[] | undefined;

    constructor(data?: ILuceneItemsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(ContentItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LuceneItemsDto {
        data = typeof data === 'object' ? data : {};
        let result = new LuceneItemsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILuceneItemsDto {
    items?: (ContentItemDto | undefined)[] | undefined;
}

export class HtmlFieldDto extends ContentFieldDto implements IHtmlFieldDto {
    html?: string | undefined;

    constructor(data?: IHtmlFieldDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.html = _data["Html"];
        }
    }

    static fromJS(data: any): HtmlFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new HtmlFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Html"] = this.html;
        super.toJSON(data);
        return data; 
    }
}

export interface IHtmlFieldDto extends IContentFieldDto {
    html?: string | undefined;
}

export class ContentPickerFieldDto extends ContentFieldDto implements IContentPickerFieldDto {
    contentItemIds?: string[] | undefined;

    constructor(data?: IContentPickerFieldDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ContentItemIds"])) {
                this.contentItemIds = [] as any;
                for (let item of _data["ContentItemIds"])
                    this.contentItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentPickerFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPickerFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentItemIds)) {
            data["ContentItemIds"] = [];
            for (let item of this.contentItemIds)
                data["ContentItemIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IContentPickerFieldDto extends IContentFieldDto {
    contentItemIds?: string[] | undefined;
}

export class MediaFieldDto extends ContentFieldDto implements IMediaFieldDto {
    paths?: string[] | undefined;

    constructor(data?: IMediaFieldDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["Paths"])) {
                this.paths = [] as any;
                for (let item of _data["Paths"])
                    this.paths!.push(item);
            }
        }
    }

    static fromJS(data: any): MediaFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new MediaFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.paths)) {
            data["Paths"] = [];
            for (let item of this.paths)
                data["Paths"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IMediaFieldDto extends IContentFieldDto {
    paths?: string[] | undefined;
}

export class TaxonomyFieldDto extends ContentFieldDto implements ITaxonomyFieldDto {
    taxonomyContentItemId?: string | undefined;
    termContentItemIds?: string[] | undefined;

    constructor(data?: ITaxonomyFieldDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.taxonomyContentItemId = _data["TaxonomyContentItemId"];
            if (Array.isArray(_data["TermContentItemIds"])) {
                this.termContentItemIds = [] as any;
                for (let item of _data["TermContentItemIds"])
                    this.termContentItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): TaxonomyFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxonomyFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TaxonomyContentItemId"] = this.taxonomyContentItemId;
        if (Array.isArray(this.termContentItemIds)) {
            data["TermContentItemIds"] = [];
            for (let item of this.termContentItemIds)
                data["TermContentItemIds"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ITaxonomyFieldDto extends IContentFieldDto {
    taxonomyContentItemId?: string | undefined;
    termContentItemIds?: string[] | undefined;
}

export class ContentItemDto extends ContentElementDto implements IContentItemDto {
    id?: number;
    contentItemId?: string | undefined;
    contentItemVersionId?: string | undefined;
    published?: boolean;
    latest?: boolean;
    modifiedUtc?: Date | undefined;
    publishedUtc?: Date | undefined;
    createdUtc?: Date | undefined;
    owner?: string | undefined;
    author?: string | undefined;
    displayText?: string | undefined;

    protected _discriminator: string;

    constructor(data?: IContentItemDto) {
        super(data);
        this._discriminator = "ContentItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["Id"];
            this.contentItemId = _data["ContentItemId"];
            this.contentItemVersionId = _data["ContentItemVersionId"];
            this.published = _data["Published"];
            this.latest = _data["Latest"];
            this.modifiedUtc = _data["ModifiedUtc"] ? new Date(_data["ModifiedUtc"].toString()) : <any>undefined;
            this.publishedUtc = _data["PublishedUtc"] ? new Date(_data["PublishedUtc"].toString()) : <any>undefined;
            this.createdUtc = _data["CreatedUtc"] ? new Date(_data["CreatedUtc"].toString()) : <any>undefined;
            this.owner = _data["Owner"];
            this.author = _data["Author"];
            this.displayText = _data["DisplayText"];
        }
    }

    static fromJS(data: any): ContentItemDto {
        data = typeof data === 'object' ? data : {};
        if (data["ContentType"] === "MenuItemDto") {
            let result = new MenuItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "LinkMenuItemItemDto") {
            let result = new LinkMenuItemItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "ContentMenuItemItemDto") {
            let result = new ContentMenuItemItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "TaxonomyItemDto") {
            let result = new TaxonomyItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "ArticleItemDto") {
            let result = new ArticleItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "LiquidPageItemDto") {
            let result = new LiquidPageItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "BlogPostItemDto") {
            let result = new BlogPostItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "BlogItemDto") {
            let result = new BlogItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "ContainerItemDto") {
            let result = new ContainerItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "BlockquoteItemDto") {
            let result = new BlockquoteItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "ImageWidgetItemDto") {
            let result = new ImageWidgetItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "LiquidWidgetItemDto") {
            let result = new LiquidWidgetItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "ImageItemDto") {
            let result = new ImageItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "ParagraphItemDto") {
            let result = new ParagraphItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "RawHtmlItemDto") {
            let result = new RawHtmlItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "PageItemDto") {
            let result = new PageItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "TagItemDto") {
            let result = new TagItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "CategoryItemDto") {
            let result = new CategoryItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "BarItemDto") {
            let result = new BarItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "FooItemDto") {
            let result = new FooItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "BagItemDto") {
            let result = new BagItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "FooTextItemDto") {
            let result = new FooTextItemDto();
            result.init(data);
            return result;
        }
        if (data["ContentType"] === "FooTextContainerItemDto") {
            let result = new FooTextContainerItemDto();
            result.init(data);
            return result;
        }
        let result = new ContentItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContentType"] = this._discriminator; 
        data["Id"] = this.id;
        data["ContentItemId"] = this.contentItemId;
        data["ContentItemVersionId"] = this.contentItemVersionId;
        data["Published"] = this.published;
        data["Latest"] = this.latest;
        data["ModifiedUtc"] = this.modifiedUtc ? this.modifiedUtc.toISOString() : <any>undefined;
        data["PublishedUtc"] = this.publishedUtc ? this.publishedUtc.toISOString() : <any>undefined;
        data["CreatedUtc"] = this.createdUtc ? this.createdUtc.toISOString() : <any>undefined;
        data["Owner"] = this.owner;
        data["Author"] = this.author;
        data["DisplayText"] = this.displayText;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentItemDto extends IContentElementDto {
    id?: number;
    contentItemId?: string | undefined;
    contentItemVersionId?: string | undefined;
    published?: boolean;
    latest?: boolean;
    modifiedUtc?: Date | undefined;
    publishedUtc?: Date | undefined;
    createdUtc?: Date | undefined;
    owner?: string | undefined;
    author?: string | undefined;
    displayText?: string | undefined;
}

export class ContentPartDto extends ContentElementDto implements IContentPartDto {

    constructor(data?: IContentPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ContentPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IContentPartDto extends IContentElementDto {
}

export class WidgetMetadataDto extends ContentPartDto implements IWidgetMetadataDto {
    renderTitle?: boolean;
    position?: string | undefined;

    constructor(data?: IWidgetMetadataDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.renderTitle = _data["RenderTitle"];
            this.position = _data["Position"];
        }
    }

    static fromJS(data: any): WidgetMetadataDto {
        data = typeof data === 'object' ? data : {};
        let result = new WidgetMetadataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RenderTitle"] = this.renderTitle;
        data["Position"] = this.position;
        super.toJSON(data);
        return data; 
    }
}

export interface IWidgetMetadataDto extends IContentPartDto {
    renderTitle?: boolean;
    position?: string | undefined;
}

export class FlowMetadataDto extends ContentPartDto implements IFlowMetadataDto {
    alignment?: FlowAlignment;
    size?: number;

    constructor(data?: IFlowMetadataDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.alignment = _data["Alignment"];
            this.size = _data["Size"];
        }
    }

    static fromJS(data: any): FlowMetadataDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlowMetadataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Alignment"] = this.alignment;
        data["Size"] = this.size;
        super.toJSON(data);
        return data; 
    }
}

export interface IFlowMetadataDto extends IContentPartDto {
    alignment?: FlowAlignment;
    size?: number;
}

export enum FlowAlignment {
    Left = 0,
    Center = 1,
    Right = 2,
    Justify = 3,
}

export class LayerMetadataDto extends ContentPartDto implements ILayerMetadataDto {
    renderTitle?: boolean;
    position?: number;
    zone?: string | undefined;
    layer?: string | undefined;

    constructor(data?: ILayerMetadataDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.renderTitle = _data["RenderTitle"];
            this.position = _data["Position"];
            this.zone = _data["Zone"];
            this.layer = _data["Layer"];
        }
    }

    static fromJS(data: any): LayerMetadataDto {
        data = typeof data === 'object' ? data : {};
        let result = new LayerMetadataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RenderTitle"] = this.renderTitle;
        data["Position"] = this.position;
        data["Zone"] = this.zone;
        data["Layer"] = this.layer;
        super.toJSON(data);
        return data; 
    }
}

export interface ILayerMetadataDto extends IContentPartDto {
    renderTitle?: boolean;
    position?: number;
    zone?: string | undefined;
    layer?: string | undefined;
}

export class ContainedPartDto extends ContentPartDto implements IContainedPartDto {
    listContentItemId?: string | undefined;
    order?: number;

    constructor(data?: IContainedPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.listContentItemId = _data["ListContentItemId"];
            this.order = _data["Order"];
        }
    }

    static fromJS(data: any): ContainedPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContainedPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ListContentItemId"] = this.listContentItemId;
        data["Order"] = this.order;
        super.toJSON(data);
        return data; 
    }
}

export interface IContainedPartDto extends IContentPartDto {
    listContentItemId?: string | undefined;
    order?: number;
}

export class MenuItemsListPartDto extends ContentPartDto implements IMenuItemsListPartDto {
    menuItems?: ContentItemDto[] | undefined;

    constructor(data?: IMenuItemsListPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["MenuItems"])) {
                this.menuItems = [] as any;
                for (let item of _data["MenuItems"])
                    this.menuItems!.push(ContentItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MenuItemsListPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuItemsListPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.menuItems)) {
            data["MenuItems"] = [];
            for (let item of this.menuItems)
                data["MenuItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IMenuItemsListPartDto extends IContentPartDto {
    menuItems?: ContentItemDto[] | undefined;
}

export class TaxonomyPartDto extends ContentPartDto implements ITaxonomyPartDto {
    termContentType?: string | undefined;
    terms?: ContentItemDto[] | undefined;

    constructor(data?: ITaxonomyPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.termContentType = _data["TermContentType"];
            if (Array.isArray(_data["Terms"])) {
                this.terms = [] as any;
                for (let item of _data["Terms"])
                    this.terms!.push(ContentItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaxonomyPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxonomyPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TermContentType"] = this.termContentType;
        if (Array.isArray(this.terms)) {
            data["Terms"] = [];
            for (let item of this.terms)
                data["Terms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ITaxonomyPartDto extends IContentPartDto {
    termContentType?: string | undefined;
    terms?: ContentItemDto[] | undefined;
}

export class TermPartDto extends ContentPartDto implements ITermPartDto {
    taxonomyContentItemId?: string | undefined;

    constructor(data?: ITermPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.taxonomyContentItemId = _data["TaxonomyContentItemId"];
        }
    }

    static fromJS(data: any): TermPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new TermPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TaxonomyContentItemId"] = this.taxonomyContentItemId;
        super.toJSON(data);
        return data; 
    }
}

export interface ITermPartDto extends IContentPartDto {
    taxonomyContentItemId?: string | undefined;
}

export class LiquidPartDto extends ContentPartDto implements ILiquidPartDto {
    liquid?: string | undefined;

    constructor(data?: ILiquidPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.liquid = _data["Liquid"];
        }
    }

    static fromJS(data: any): LiquidPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new LiquidPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Liquid"] = this.liquid;
        super.toJSON(data);
        return data; 
    }
}

export interface ILiquidPartDto extends IContentPartDto {
    liquid?: string | undefined;
}

export class CommonPartDto extends ContentPartDto implements ICommonPartDto {

    constructor(data?: ICommonPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CommonPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommonPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICommonPartDto extends IContentPartDto {
}

export class AliasPartDto extends ContentPartDto implements IAliasPartDto {
    alias?: string | undefined;

    constructor(data?: IAliasPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.alias = _data["Alias"];
        }
    }

    static fromJS(data: any): AliasPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new AliasPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Alias"] = this.alias;
        super.toJSON(data);
        return data; 
    }
}

export interface IAliasPartDto extends IContentPartDto {
    alias?: string | undefined;
}

export class AutoroutePartDto extends ContentPartDto implements IAutoroutePartDto {
    path?: string | undefined;
    setHomepage?: boolean;
    disabled?: boolean;
    routeContainedItems?: boolean;
    absolute?: boolean;

    constructor(data?: IAutoroutePartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.path = _data["Path"];
            this.setHomepage = _data["SetHomepage"];
            this.disabled = _data["Disabled"];
            this.routeContainedItems = _data["RouteContainedItems"];
            this.absolute = _data["Absolute"];
        }
    }

    static fromJS(data: any): AutoroutePartDto {
        data = typeof data === 'object' ? data : {};
        let result = new AutoroutePartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Path"] = this.path;
        data["SetHomepage"] = this.setHomepage;
        data["Disabled"] = this.disabled;
        data["RouteContainedItems"] = this.routeContainedItems;
        data["Absolute"] = this.absolute;
        super.toJSON(data);
        return data; 
    }
}

export interface IAutoroutePartDto extends IContentPartDto {
    path?: string | undefined;
    setHomepage?: boolean;
    disabled?: boolean;
    routeContainedItems?: boolean;
    absolute?: boolean;
}

export class PreviewPartDto extends ContentPartDto implements IPreviewPartDto {

    constructor(data?: IPreviewPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): PreviewPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new PreviewPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPreviewPartDto extends IContentPartDto {
}

export class WidgetsListPartDto extends ContentPartDto implements IWidgetsListPartDto {
    widgets?: { [key: string]: ContentItemDto[]; } | undefined;

    constructor(data?: IWidgetsListPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["Widgets"]) {
                this.widgets = {} as any;
                for (let key in _data["Widgets"]) {
                    if (_data["Widgets"].hasOwnProperty(key))
                        this.widgets![key] = _data["Widgets"][key] ? _data["Widgets"][key].map((i: any) => ContentItemDto.fromJS(i)) : [];
                }
            }
        }
    }

    static fromJS(data: any): WidgetsListPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new WidgetsListPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.widgets) {
            data["Widgets"] = {};
            for (let key in this.widgets) {
                if (this.widgets.hasOwnProperty(key))
                    data["Widgets"][key] = this.widgets[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IWidgetsListPartDto extends IContentPartDto {
    widgets?: { [key: string]: ContentItemDto[]; } | undefined;
}

export class FlowPartDto extends ContentPartDto implements IFlowPartDto {
    widgets?: ContentItemDto[] | undefined;

    constructor(data?: IFlowPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["Widgets"])) {
                this.widgets = [] as any;
                for (let item of _data["Widgets"])
                    this.widgets!.push(ContentItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FlowPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlowPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.widgets)) {
            data["Widgets"] = [];
            for (let item of this.widgets)
                data["Widgets"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFlowPartDto extends IContentPartDto {
    widgets?: ContentItemDto[] | undefined;
}

export class BagPartDto extends ContentPartDto implements IBagPartDto {
    contentItems?: ContentItemDto[] | undefined;

    constructor(data?: IBagPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ContentItems"])) {
                this.contentItems = [] as any;
                for (let item of _data["ContentItems"])
                    this.contentItems!.push(ContentItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BagPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new BagPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentItems)) {
            data["ContentItems"] = [];
            for (let item of this.contentItems)
                data["ContentItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBagPartDto extends IContentPartDto {
    contentItems?: ContentItemDto[] | undefined;
}

export class HtmlBodyPartDto extends ContentPartDto implements IHtmlBodyPartDto {
    fooField?: TextFieldDto | undefined;
    html?: string | undefined;

    constructor(data?: IHtmlBodyPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fooField = _data["FooField"] ? TextFieldDto.fromJS(_data["FooField"]) : <any>undefined;
            this.html = _data["Html"];
        }
    }

    static fromJS(data: any): HtmlBodyPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new HtmlBodyPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FooField"] = this.fooField ? this.fooField.toJSON() : <any>undefined;
        data["Html"] = this.html;
        super.toJSON(data);
        return data; 
    }
}

export interface IHtmlBodyPartDto extends IContentPartDto {
    fooField?: TextFieldDto | undefined;
    html?: string | undefined;
}

export class ListPartDto extends ContentPartDto implements IListPartDto {

    constructor(data?: IListPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ListPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IListPartDto extends IContentPartDto {
}

export class MarkdownBodyPartDto extends ContentPartDto implements IMarkdownBodyPartDto {
    markdown?: string | undefined;

    constructor(data?: IMarkdownBodyPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.markdown = _data["Markdown"];
        }
    }

    static fromJS(data: any): MarkdownBodyPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new MarkdownBodyPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Markdown"] = this.markdown;
        super.toJSON(data);
        return data; 
    }
}

export interface IMarkdownBodyPartDto extends IContentPartDto {
    markdown?: string | undefined;
}

export class TitlePartDto extends ContentPartDto implements ITitlePartDto {
    title?: string | undefined;

    constructor(data?: ITitlePartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["Title"];
        }
    }

    static fromJS(data: any): TitlePartDto {
        data = typeof data === 'object' ? data : {};
        let result = new TitlePartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        super.toJSON(data);
        return data; 
    }
}

export interface ITitlePartDto extends IContentPartDto {
    title?: string | undefined;
}

export class MenuPartDto extends ContentPartDto implements IMenuPartDto {

    constructor(data?: IMenuPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): MenuPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMenuPartDto extends IContentPartDto {
}

export class MenuItemPartDto extends ContentPartDto implements IMenuItemPartDto {

    constructor(data?: IMenuItemPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): MenuItemPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuItemPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMenuItemPartDto extends IContentPartDto {
}

export class LinkMenuItemPartDto extends ContentPartDto implements ILinkMenuItemPartDto {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: ILinkMenuItemPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["Name"];
            this.url = _data["Url"];
        }
    }

    static fromJS(data: any): LinkMenuItemPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkMenuItemPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["Url"] = this.url;
        super.toJSON(data);
        return data; 
    }
}

export interface ILinkMenuItemPartDto extends IContentPartDto {
    name?: string | undefined;
    url?: string | undefined;
}

export class ContentMenuItemPartDto extends ContentPartDto implements IContentMenuItemPartDto {
    selectedContentItem?: ContentPickerFieldDto | undefined;
    name?: string | undefined;

    constructor(data?: IContentMenuItemPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.selectedContentItem = _data["SelectedContentItem"] ? ContentPickerFieldDto.fromJS(_data["SelectedContentItem"]) : <any>undefined;
            this.name = _data["Name"];
        }
    }

    static fromJS(data: any): ContentMenuItemPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMenuItemPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SelectedContentItem"] = this.selectedContentItem ? this.selectedContentItem.toJSON() : <any>undefined;
        data["Name"] = this.name;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentMenuItemPartDto extends IContentPartDto {
    selectedContentItem?: ContentPickerFieldDto | undefined;
    name?: string | undefined;
}

export class SamplePartDto extends ContentPartDto implements ISamplePartDto {
    show?: boolean;

    constructor(data?: ISamplePartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.show = _data["Show"];
        }
    }

    static fromJS(data: any): SamplePartDto {
        data = typeof data === 'object' ? data : {};
        let result = new SamplePartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Show"] = this.show;
        super.toJSON(data);
        return data; 
    }
}

export interface ISamplePartDto extends IContentPartDto {
    show?: boolean;
}

export class MenuItemDto extends ContentItemDto implements IMenuItemDto {
    titlePart?: TitlePartDto | undefined;
    aliasPart?: AliasPartDto | undefined;
    menuPart?: MenuPartDto | undefined;
    menuItemsListPart?: MenuItemsListPartDto | undefined;

    constructor(data?: IMenuItemDto) {
        super(data);
        this._discriminator = "MenuItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
            this.aliasPart = _data["AliasPart"] ? AliasPartDto.fromJS(_data["AliasPart"]) : <any>undefined;
            this.menuPart = _data["MenuPart"] ? MenuPartDto.fromJS(_data["MenuPart"]) : <any>undefined;
            this.menuItemsListPart = _data["MenuItemsListPart"] ? MenuItemsListPartDto.fromJS(_data["MenuItemsListPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MenuItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new MenuItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        data["AliasPart"] = this.aliasPart ? this.aliasPart.toJSON() : <any>undefined;
        data["MenuPart"] = this.menuPart ? this.menuPart.toJSON() : <any>undefined;
        data["MenuItemsListPart"] = this.menuItemsListPart ? this.menuItemsListPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IMenuItemDto extends IContentItemDto {
    titlePart?: TitlePartDto | undefined;
    aliasPart?: AliasPartDto | undefined;
    menuPart?: MenuPartDto | undefined;
    menuItemsListPart?: MenuItemsListPartDto | undefined;
}

export class LinkMenuItemDto extends ContentPartDto implements ILinkMenuItemDto {

    constructor(data?: ILinkMenuItemDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): LinkMenuItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkMenuItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ILinkMenuItemDto extends IContentPartDto {
}

export class LinkMenuItemItemDto extends ContentItemDto implements ILinkMenuItemItemDto {
    linkMenuItem?: LinkMenuItemDto | undefined;
    linkMenuItemPart?: LinkMenuItemPartDto | undefined;

    constructor(data?: ILinkMenuItemItemDto) {
        super(data);
        this._discriminator = "LinkMenuItemItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.linkMenuItem = _data["LinkMenuItem"] ? LinkMenuItemDto.fromJS(_data["LinkMenuItem"]) : <any>undefined;
            this.linkMenuItemPart = _data["LinkMenuItemPart"] ? LinkMenuItemPartDto.fromJS(_data["LinkMenuItemPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LinkMenuItemItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkMenuItemItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LinkMenuItem"] = this.linkMenuItem ? this.linkMenuItem.toJSON() : <any>undefined;
        data["LinkMenuItemPart"] = this.linkMenuItemPart ? this.linkMenuItemPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ILinkMenuItemItemDto extends IContentItemDto {
    linkMenuItem?: LinkMenuItemDto | undefined;
    linkMenuItemPart?: LinkMenuItemPartDto | undefined;
}

export class ContentMenuItemDto extends ContentPartDto implements IContentMenuItemDto {

    constructor(data?: IContentMenuItemDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ContentMenuItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMenuItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IContentMenuItemDto extends IContentPartDto {
}

export class ContentMenuItemItemDto extends ContentItemDto implements IContentMenuItemItemDto {
    contentMenuItem?: ContentMenuItemDto | undefined;
    contentMenuItemPart?: ContentMenuItemPartDto | undefined;

    constructor(data?: IContentMenuItemItemDto) {
        super(data);
        this._discriminator = "ContentMenuItemItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contentMenuItem = _data["ContentMenuItem"] ? ContentMenuItemDto.fromJS(_data["ContentMenuItem"]) : <any>undefined;
            this.contentMenuItemPart = _data["ContentMenuItemPart"] ? ContentMenuItemPartDto.fromJS(_data["ContentMenuItemPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContentMenuItemItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentMenuItemItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContentMenuItem"] = this.contentMenuItem ? this.contentMenuItem.toJSON() : <any>undefined;
        data["ContentMenuItemPart"] = this.contentMenuItemPart ? this.contentMenuItemPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IContentMenuItemItemDto extends IContentItemDto {
    contentMenuItem?: ContentMenuItemDto | undefined;
    contentMenuItemPart?: ContentMenuItemPartDto | undefined;
}

export class TaxonomyItemDto extends ContentItemDto implements ITaxonomyItemDto {
    titlePart?: TitlePartDto | undefined;
    aliasPart?: AliasPartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    taxonomyPart?: TaxonomyPartDto | undefined;

    constructor(data?: ITaxonomyItemDto) {
        super(data);
        this._discriminator = "TaxonomyItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
            this.aliasPart = _data["AliasPart"] ? AliasPartDto.fromJS(_data["AliasPart"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
            this.taxonomyPart = _data["TaxonomyPart"] ? TaxonomyPartDto.fromJS(_data["TaxonomyPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TaxonomyItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxonomyItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        data["AliasPart"] = this.aliasPart ? this.aliasPart.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        data["TaxonomyPart"] = this.taxonomyPart ? this.taxonomyPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ITaxonomyItemDto extends IContentItemDto {
    titlePart?: TitlePartDto | undefined;
    aliasPart?: AliasPartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    taxonomyPart?: TaxonomyPartDto | undefined;
}

export class ArticleDto extends ContentPartDto implements IArticleDto {
    subtitle?: TextFieldDto | undefined;
    image?: MediaFieldDto | undefined;

    constructor(data?: IArticleDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.subtitle = _data["Subtitle"] ? TextFieldDto.fromJS(_data["Subtitle"]) : <any>undefined;
            this.image = _data["Image"] ? MediaFieldDto.fromJS(_data["Image"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ArticleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Subtitle"] = this.subtitle ? this.subtitle.toJSON() : <any>undefined;
        data["Image"] = this.image ? this.image.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IArticleDto extends IContentPartDto {
    subtitle?: TextFieldDto | undefined;
    image?: MediaFieldDto | undefined;
}

export class ArticleItemDto extends ContentItemDto implements IArticleItemDto {
    article?: ArticleDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    htmlBodyPart?: HtmlBodyPartDto | undefined;
    titlePart?: TitlePartDto | undefined;

    constructor(data?: IArticleItemDto) {
        super(data);
        this._discriminator = "ArticleItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.article = _data["Article"] ? ArticleDto.fromJS(_data["Article"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
            this.htmlBodyPart = _data["HtmlBodyPart"] ? HtmlBodyPartDto.fromJS(_data["HtmlBodyPart"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ArticleItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Article"] = this.article ? this.article.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        data["HtmlBodyPart"] = this.htmlBodyPart ? this.htmlBodyPart.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IArticleItemDto extends IContentItemDto {
    article?: ArticleDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    htmlBodyPart?: HtmlBodyPartDto | undefined;
    titlePart?: TitlePartDto | undefined;
}

export class LiquidPageDto extends ContentPartDto implements ILiquidPageDto {

    constructor(data?: ILiquidPageDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): LiquidPageDto {
        data = typeof data === 'object' ? data : {};
        let result = new LiquidPageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ILiquidPageDto extends IContentPartDto {
}

export class LiquidPageItemDto extends ContentItemDto implements ILiquidPageItemDto {
    liquidPage?: LiquidPageDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    liquidPart?: LiquidPartDto | undefined;
    titlePart?: TitlePartDto | undefined;

    constructor(data?: ILiquidPageItemDto) {
        super(data);
        this._discriminator = "LiquidPageItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.liquidPage = _data["LiquidPage"] ? LiquidPageDto.fromJS(_data["LiquidPage"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
            this.liquidPart = _data["LiquidPart"] ? LiquidPartDto.fromJS(_data["LiquidPart"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LiquidPageItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LiquidPageItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LiquidPage"] = this.liquidPage ? this.liquidPage.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        data["LiquidPart"] = this.liquidPart ? this.liquidPart.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ILiquidPageItemDto extends IContentItemDto {
    liquidPage?: LiquidPageDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    liquidPart?: LiquidPartDto | undefined;
    titlePart?: TitlePartDto | undefined;
}

export class BlogPostDto extends ContentPartDto implements IBlogPostDto {
    subtitle?: TextFieldDto | undefined;
    image?: MediaFieldDto | undefined;
    tags?: TaxonomyFieldDto | undefined;
    category?: TaxonomyFieldDto | undefined;

    constructor(data?: IBlogPostDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.subtitle = _data["Subtitle"] ? TextFieldDto.fromJS(_data["Subtitle"]) : <any>undefined;
            this.image = _data["Image"] ? MediaFieldDto.fromJS(_data["Image"]) : <any>undefined;
            this.tags = _data["Tags"] ? TaxonomyFieldDto.fromJS(_data["Tags"]) : <any>undefined;
            this.category = _data["Category"] ? TaxonomyFieldDto.fromJS(_data["Category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BlogPostDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogPostDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Subtitle"] = this.subtitle ? this.subtitle.toJSON() : <any>undefined;
        data["Image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["Tags"] = this.tags ? this.tags.toJSON() : <any>undefined;
        data["Category"] = this.category ? this.category.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBlogPostDto extends IContentPartDto {
    subtitle?: TextFieldDto | undefined;
    image?: MediaFieldDto | undefined;
    tags?: TaxonomyFieldDto | undefined;
    category?: TaxonomyFieldDto | undefined;
}

export class BlogPostItemDto extends ContentItemDto implements IBlogPostItemDto {
    blogPost?: BlogPostDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    markdownBodyPart?: MarkdownBodyPartDto | undefined;

    constructor(data?: IBlogPostItemDto) {
        super(data);
        this._discriminator = "BlogPostItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.blogPost = _data["BlogPost"] ? BlogPostDto.fromJS(_data["BlogPost"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
            this.markdownBodyPart = _data["MarkdownBodyPart"] ? MarkdownBodyPartDto.fromJS(_data["MarkdownBodyPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BlogPostItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogPostItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BlogPost"] = this.blogPost ? this.blogPost.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        data["MarkdownBodyPart"] = this.markdownBodyPart ? this.markdownBodyPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBlogPostItemDto extends IContentItemDto {
    blogPost?: BlogPostDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    markdownBodyPart?: MarkdownBodyPartDto | undefined;
}

export class BlogDto extends ContentPartDto implements IBlogDto {
    image?: MediaFieldDto | undefined;

    constructor(data?: IBlogDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.image = _data["Image"] ? MediaFieldDto.fromJS(_data["Image"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BlogDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Image"] = this.image ? this.image.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBlogDto extends IContentPartDto {
    image?: MediaFieldDto | undefined;
}

export class BlogItemDto extends ContentItemDto implements IBlogItemDto {
    blog?: BlogDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    htmlBodyPart?: HtmlBodyPartDto | undefined;
    listPart?: ListPartDto | undefined;

    constructor(data?: IBlogItemDto) {
        super(data);
        this._discriminator = "BlogItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.blog = _data["Blog"] ? BlogDto.fromJS(_data["Blog"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
            this.htmlBodyPart = _data["HtmlBodyPart"] ? HtmlBodyPartDto.fromJS(_data["HtmlBodyPart"]) : <any>undefined;
            this.listPart = _data["ListPart"] ? ListPartDto.fromJS(_data["ListPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BlogItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlogItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Blog"] = this.blog ? this.blog.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        data["HtmlBodyPart"] = this.htmlBodyPart ? this.htmlBodyPart.toJSON() : <any>undefined;
        data["ListPart"] = this.listPart ? this.listPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBlogItemDto extends IContentItemDto {
    blog?: BlogDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    htmlBodyPart?: HtmlBodyPartDto | undefined;
    listPart?: ListPartDto | undefined;
}

export class ContainerDto extends ContentPartDto implements IContainerDto {

    constructor(data?: IContainerDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ContainerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContainerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IContainerDto extends IContentPartDto {
}

export class ContainerItemDto extends ContentItemDto implements IContainerItemDto {
    container?: ContainerDto | undefined;
    flowPart?: FlowPartDto | undefined;

    constructor(data?: IContainerItemDto) {
        super(data);
        this._discriminator = "ContainerItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.container = _data["Container"] ? ContainerDto.fromJS(_data["Container"]) : <any>undefined;
            this.flowPart = _data["FlowPart"] ? FlowPartDto.fromJS(_data["FlowPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ContainerItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContainerItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Container"] = this.container ? this.container.toJSON() : <any>undefined;
        data["FlowPart"] = this.flowPart ? this.flowPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IContainerItemDto extends IContentItemDto {
    container?: ContainerDto | undefined;
    flowPart?: FlowPartDto | undefined;
}

export class BlockquoteDto extends ContentPartDto implements IBlockquoteDto {
    quote?: TextFieldDto | undefined;

    constructor(data?: IBlockquoteDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.quote = _data["Quote"] ? TextFieldDto.fromJS(_data["Quote"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BlockquoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlockquoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Quote"] = this.quote ? this.quote.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBlockquoteDto extends IContentPartDto {
    quote?: TextFieldDto | undefined;
}

export class BlockquoteItemDto extends ContentItemDto implements IBlockquoteItemDto {
    blockquote?: BlockquoteDto | undefined;

    constructor(data?: IBlockquoteItemDto) {
        super(data);
        this._discriminator = "BlockquoteItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.blockquote = _data["Blockquote"] ? BlockquoteDto.fromJS(_data["Blockquote"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BlockquoteItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlockquoteItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Blockquote"] = this.blockquote ? this.blockquote.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBlockquoteItemDto extends IContentItemDto {
    blockquote?: BlockquoteDto | undefined;
}

export class ImageWidgetItemDto extends ContentItemDto implements IImageWidgetItemDto {

    constructor(data?: IImageWidgetItemDto) {
        super(data);
        this._discriminator = "ImageWidgetItemDto";
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ImageWidgetItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImageWidgetItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IImageWidgetItemDto extends IContentItemDto {
}

export class LiquidWidgetItemDto extends ContentItemDto implements ILiquidWidgetItemDto {
    liquidPart?: LiquidPartDto | undefined;

    constructor(data?: ILiquidWidgetItemDto) {
        super(data);
        this._discriminator = "LiquidWidgetItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.liquidPart = _data["LiquidPart"] ? LiquidPartDto.fromJS(_data["LiquidPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LiquidWidgetItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LiquidWidgetItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LiquidPart"] = this.liquidPart ? this.liquidPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ILiquidWidgetItemDto extends IContentItemDto {
    liquidPart?: LiquidPartDto | undefined;
}

export class ImageDto extends ContentPartDto implements IImageDto {
    media?: MediaFieldDto | undefined;
    caption?: TextFieldDto | undefined;

    constructor(data?: IImageDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.media = _data["Media"] ? MediaFieldDto.fromJS(_data["Media"]) : <any>undefined;
            this.caption = _data["Caption"] ? TextFieldDto.fromJS(_data["Caption"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ImageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Media"] = this.media ? this.media.toJSON() : <any>undefined;
        data["Caption"] = this.caption ? this.caption.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IImageDto extends IContentPartDto {
    media?: MediaFieldDto | undefined;
    caption?: TextFieldDto | undefined;
}

export class ImageItemDto extends ContentItemDto implements IImageItemDto {
    image?: ImageDto | undefined;
    titlePart?: TitlePartDto | undefined;

    constructor(data?: IImageItemDto) {
        super(data);
        this._discriminator = "ImageItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.image = _data["Image"] ? ImageDto.fromJS(_data["Image"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ImageItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ImageItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IImageItemDto extends IContentItemDto {
    image?: ImageDto | undefined;
    titlePart?: TitlePartDto | undefined;
}

export class ParagraphDto extends ContentPartDto implements IParagraphDto {
    content?: HtmlFieldDto | undefined;

    constructor(data?: IParagraphDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["Content"] ? HtmlFieldDto.fromJS(_data["Content"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ParagraphDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParagraphDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Content"] = this.content ? this.content.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IParagraphDto extends IContentPartDto {
    content?: HtmlFieldDto | undefined;
}

export class ParagraphItemDto extends ContentItemDto implements IParagraphItemDto {
    paragraph?: ParagraphDto | undefined;

    constructor(data?: IParagraphItemDto) {
        super(data);
        this._discriminator = "ParagraphItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.paragraph = _data["Paragraph"] ? ParagraphDto.fromJS(_data["Paragraph"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ParagraphItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParagraphItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Paragraph"] = this.paragraph ? this.paragraph.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IParagraphItemDto extends IContentItemDto {
    paragraph?: ParagraphDto | undefined;
}

export class RawHtmlDto extends ContentPartDto implements IRawHtmlDto {
    content?: HtmlFieldDto | undefined;

    constructor(data?: IRawHtmlDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["Content"] ? HtmlFieldDto.fromJS(_data["Content"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RawHtmlDto {
        data = typeof data === 'object' ? data : {};
        let result = new RawHtmlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Content"] = this.content ? this.content.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRawHtmlDto extends IContentPartDto {
    content?: HtmlFieldDto | undefined;
}

export class RawHtmlItemDto extends ContentItemDto implements IRawHtmlItemDto {
    rawHtml?: RawHtmlDto | undefined;

    constructor(data?: IRawHtmlItemDto) {
        super(data);
        this._discriminator = "RawHtmlItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rawHtml = _data["RawHtml"] ? RawHtmlDto.fromJS(_data["RawHtml"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RawHtmlItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new RawHtmlItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RawHtml"] = this.rawHtml ? this.rawHtml.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRawHtmlItemDto extends IContentItemDto {
    rawHtml?: RawHtmlDto | undefined;
}

export class PageDto extends ContentPartDto implements IPageDto {

    constructor(data?: IPageDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): PageDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPageDto extends IContentPartDto {
}

export class PageItemDto extends ContentItemDto implements IPageItemDto {
    page?: PageDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    flowPart?: FlowPartDto | undefined;
    titlePart?: TitlePartDto | undefined;

    constructor(data?: IPageItemDto) {
        super(data);
        this._discriminator = "PageItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.page = _data["Page"] ? PageDto.fromJS(_data["Page"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
            this.flowPart = _data["FlowPart"] ? FlowPartDto.fromJS(_data["FlowPart"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Page"] = this.page ? this.page.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        data["FlowPart"] = this.flowPart ? this.flowPart.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IPageItemDto extends IContentItemDto {
    page?: PageDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
    flowPart?: FlowPartDto | undefined;
    titlePart?: TitlePartDto | undefined;
}

export class TagDto extends ContentPartDto implements ITagDto {

    constructor(data?: ITagDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): TagDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ITagDto extends IContentPartDto {
}

export class TagItemDto extends ContentItemDto implements ITagItemDto {
    tag?: TagDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;

    constructor(data?: ITagItemDto) {
        super(data);
        this._discriminator = "TagItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tag = _data["Tag"] ? TagDto.fromJS(_data["Tag"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TagItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Tag"] = this.tag ? this.tag.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ITagItemDto extends IContentItemDto {
    tag?: TagDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
}

export class CategoryDto extends ContentPartDto implements ICategoryDto {
    icon?: TextFieldDto | undefined;

    constructor(data?: ICategoryDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.icon = _data["Icon"] ? TextFieldDto.fromJS(_data["Icon"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Icon"] = this.icon ? this.icon.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICategoryDto extends IContentPartDto {
    icon?: TextFieldDto | undefined;
}

export class CategoryItemDto extends ContentItemDto implements ICategoryItemDto {
    category?: CategoryDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;

    constructor(data?: ICategoryItemDto) {
        super(data);
        this._discriminator = "CategoryItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.category = _data["Category"] ? CategoryDto.fromJS(_data["Category"]) : <any>undefined;
            this.titlePart = _data["TitlePart"] ? TitlePartDto.fromJS(_data["TitlePart"]) : <any>undefined;
            this.autoroutePart = _data["AutoroutePart"] ? AutoroutePartDto.fromJS(_data["AutoroutePart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["TitlePart"] = this.titlePart ? this.titlePart.toJSON() : <any>undefined;
        data["AutoroutePart"] = this.autoroutePart ? this.autoroutePart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICategoryItemDto extends IContentItemDto {
    category?: CategoryDto | undefined;
    titlePart?: TitlePartDto | undefined;
    autoroutePart?: AutoroutePartDto | undefined;
}

export class BarItemDto extends ContentItemDto implements IBarItemDto {
    htmlBodyPart?: HtmlBodyPartDto | undefined;

    constructor(data?: IBarItemDto) {
        super(data);
        this._discriminator = "BarItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.htmlBodyPart = _data["HtmlBodyPart"] ? HtmlBodyPartDto.fromJS(_data["HtmlBodyPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BarItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BarItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HtmlBodyPart"] = this.htmlBodyPart ? this.htmlBodyPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBarItemDto extends IContentItemDto {
    htmlBodyPart?: HtmlBodyPartDto | undefined;
}

export class FooItemDto extends ContentItemDto implements IFooItemDto {
    markdownBodyPart?: MarkdownBodyPartDto | undefined;

    constructor(data?: IFooItemDto) {
        super(data);
        this._discriminator = "FooItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.markdownBodyPart = _data["MarkdownBodyPart"] ? MarkdownBodyPartDto.fromJS(_data["MarkdownBodyPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FooItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new FooItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MarkdownBodyPart"] = this.markdownBodyPart ? this.markdownBodyPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFooItemDto extends IContentItemDto {
    markdownBodyPart?: MarkdownBodyPartDto | undefined;
}

export class BagItemDto extends ContentItemDto implements IBagItemDto {
    items?: BagPartDto | undefined;

    constructor(data?: IBagItemDto) {
        super(data);
        this._discriminator = "BagItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.items = _data["Items"] ? BagPartDto.fromJS(_data["Items"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BagItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BagItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Items"] = this.items ? this.items.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IBagItemDto extends IContentItemDto {
    items?: BagPartDto | undefined;
}

export class FooTextDto extends ContentPartDto implements IFooTextDto {
    fooField?: TextFieldDto | undefined;

    constructor(data?: IFooTextDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fooField = _data["FooField"] ? TextFieldDto.fromJS(_data["FooField"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FooTextDto {
        data = typeof data === 'object' ? data : {};
        let result = new FooTextDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FooField"] = this.fooField ? this.fooField.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFooTextDto extends IContentPartDto {
    fooField?: TextFieldDto | undefined;
}

export class FooTextItemDto extends ContentItemDto implements IFooTextItemDto {
    fooText?: FooTextDto | undefined;

    constructor(data?: IFooTextItemDto) {
        super(data);
        this._discriminator = "FooTextItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fooText = _data["FooText"] ? FooTextDto.fromJS(_data["FooText"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FooTextItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new FooTextItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FooText"] = this.fooText ? this.fooText.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFooTextItemDto extends IContentItemDto {
    fooText?: FooTextDto | undefined;
}

export class FooTextContainerItemDto extends ContentItemDto implements IFooTextContainerItemDto {
    listPart?: ListPartDto | undefined;

    constructor(data?: IFooTextContainerItemDto) {
        super(data);
        this._discriminator = "FooTextContainerItemDto";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.listPart = _data["ListPart"] ? ListPartDto.fromJS(_data["ListPart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FooTextContainerItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new FooTextContainerItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ListPart"] = this.listPart ? this.listPart.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFooTextContainerItemDto extends IContentItemDto {
    listPart?: ListPartDto | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}